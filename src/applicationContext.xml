<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx.xsd">
		
	<!-- spring读取的配置文件，主要配置和业务逻辑相关的内容(数据源、和mybatis的整合、事务控制、xxx) -->
	
	<!-- 扫描业务逻辑相关组件 -->
	<context:component-scan base-package="com.briup.bean,com.briup.dao,com.briup.service"></context:component-scan>
	
	<!-- 配置数据源 -->
	<context:property-placeholder location="classpath:db.properties"/>
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
	  <property name="driverClassName"><value>${jdbc.driverClassName}</value></property>
	  <property name="url"><value>${jdbc.url}</value></property>
	  <property name="username"><value>${jdbc.username}</value></property>
	  <property name="password"><value>${jdbc.password}</value></property>
	</bean>
	
	<!-- 配置和mybatis的整合
			配置sqlsesessionFactory(需要数据源，mapper文件路径，...)
			配置扫描器，将mybatis接口的实现加入到IOC容器中
	 -->
	 <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="typeAliasesPackage" value="com.briup.bean"></property>
		<!-- 设置常规setting属性 -->
		<property name="configurationProperties">
            <props>
                <prop key="cacheEnabled">true</prop> 
                <prop key="lazyLoadingEnabled">false</prop> 
            </props>
        </property>
		<!-- 指定mybatis，mapper文件的位置 -->
		<property name="mapperLocations" value="classpath:com/briup/dao/mapper/*.xml"></property>
	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 扫描所有dao接口的实现，加入到ioc容器 -->
		<property name="basePackage" value="com.briup.dao"></property>
	</bean>
	
	<!-- 事务控制 
			开启事务控制(控制住数据源)
			切入点
			增强器
	-->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 控制住数据源 -->
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 事务控制的配置：
			基于注解的事务
			使用xml配置形式的事务(一般使用配置式)
	-->
	<aop:config proxy-target-class="true">
		<!-- 切入点表达式：切入哪些方法 -->
		<aop:pointcut expression="execution(* com.briup.service..*.*(..))" id="txPointcut"/>
		<!-- 配置事务增强，即找到切入方法后，事务如何切入 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
	</aop:config>
	<!-- 事务增强 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<!-- 注入事务属性：哪些方法切入之后该怎么做 -->
		<tx:attributes>
			<!-- 
				1、在oracle下，不支持readOnly，也就是不论Connection里的readOnly属性是true还是false均不影响SQL的增删改查；
				2、在mysql下，支持readOnly，设置为true时，只能查询，若增删改会异常：
			 -->
			<tx:method name="get*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="*" propagation="REQUIRED" rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>
	
	<!-- xxx -->
</beans>